---
# =================================
# PLAYBOOK POUR D√âPLOIEMENT S3 + CLOUDFRONT
# =================================

- name: Deploy React App to S3 and CloudFront
  hosts: localhost
  gather_facts: no
  vars:
    # Variables par d√©faut (√† surcharger)
    project_name: "{{ project_name | default('ecommerce-platform') }}"
    environment: "{{ environment | default('prod') }}"
    
    # R√©pertoires
    frontend_build_dir: "{{ playbook_dir }}/../frontend-app/build"
    terraform_output_file: "{{ playbook_dir }}/../terraform/environments/{{ environment }}/terraform.tfstate"
    
    # Configuration S3/CloudFront (r√©cup√©r√©e depuis Terraform)
    s3_bucket: "{{ s3_static_bucket }}"
    cloudfront_id: "{{ cloudfront_distribution_id }}"
    aws_region: "{{ aws_region | default('eu-west-1') }}"

  tasks:
    # =================================
    # PR√âPARATION ET V√âRIFICATIONS
    # =================================
    
    - name: V√©rifier que le r√©pertoire de build existe
      stat:
        path: "{{ frontend_build_dir }}"
      register: build_dir_stat
      
    - name: √âchouer si le build n'existe pas
      fail:
        msg: "Le r√©pertoire de build {{ frontend_build_dir }} n'existe pas. Ex√©cutez 'npm run build' d'abord."
      when: not build_dir_stat.stat.exists

    - name: V√©rifier la pr√©sence d'AWS CLI
      command: aws --version
      register: aws_cli_check
      failed_when: aws_cli_check.rc != 0
      changed_when: false

    - name: V√©rifier les credentials AWS
      command: aws sts get-caller-identity
      register: aws_identity
      failed_when: aws_identity.rc != 0
      changed_when: false

    - name: Afficher l'identit√© AWS
      debug:
        msg: "D√©ploiement avec l'utilisateur AWS: {{ (aws_identity.stdout | from_json).Arn }}"

    # =================================
    # R√âCUP√âRATION DES OUTPUTS TERRAFORM
    # =================================
    
    - name: R√©cup√©rer les outputs Terraform S3
      shell: |
        cd {{ playbook_dir }}/../terraform/environments/{{ environment }}
        terraform output -json s3_static_ansible_vars
      register: terraform_s3_outputs
      changed_when: false

    - name: Parser les outputs S3
      set_fact:
        s3_config: "{{ terraform_s3_outputs.stdout | from_json }}"

    - name: Afficher la configuration S3
      debug:
        var: s3_config

    # =================================
    # BUILD ET OPTIMISATION
    # =================================
    
    - name: Construire l'application React (si n√©cessaire)
      shell: |
        cd {{ playbook_dir }}/../frontend-app
        npm ci
        npm run build
      when: frontend_force_build | default(false) | bool
      register: npm_build_result

    - name: Compresser les fichiers CSS et JS
      shell: |
        find {{ frontend_build_dir }} -name "*.css" -exec gzip -k {} \;
        find {{ frontend_build_dir }} -name "*.js" -exec gzip -k {} \;
        find {{ frontend_build_dir }} -name "*.html" -exec gzip -k {} \;
      register: compression_result
      
    - name: Afficher les r√©sultats de compression
      debug:
        msg: "Fichiers compress√©s dans {{ frontend_build_dir }}"

    # =================================
    # SYNCHRONISATION S3
    # =================================
    
    - name: Sauvegarder la version actuelle (optionnel)
      shell: |
        aws s3 sync s3://{{ s3_config.s3_static_bucket }} s3://{{ s3_config.s3_static_bucket }}-backup-$(date +%Y%m%d-%H%M%S) \
          --region {{ aws_region }}
      when: create_backup | default(false) | bool
      register: backup_result

    - name: Synchroniser les fichiers vers S3
      shell: |
        aws s3 sync {{ frontend_build_dir }} s3://{{ s3_config.s3_static_bucket }} \
          --region {{ aws_region }} \
          --delete \
          --cache-control "public,max-age=31536000,immutable" \
          --exclude "*.html" \
          --exclude "service-worker.js" \
          --exclude "manifest.json"
      register: s3_sync_assets

    - name: Synchroniser les fichiers HTML avec cache court
      shell: |
        aws s3 sync {{ frontend_build_dir }} s3://{{ s3_config.s3_static_bucket }} \
          --region {{ aws_region }} \
          --cache-control "public,max-age=0,must-revalidate" \
          --include "*.html" \
          --include "service-worker.js" \
          --include "manifest.json"
      register: s3_sync_html

    - name: D√©finir les m√©tadonn√©es pour la compression
      shell: |
        aws s3 cp {{ frontend_build_dir }} s3://{{ s3_config.s3_static_bucket }} \
          --recursive \
          --metadata-directive REPLACE \
          --content-encoding gzip \
          --include "*.gz" \
          --region {{ aws_region }}
      register: s3_compression_metadata

    # =================================
    # INVALIDATION CLOUDFRONT
    # =================================
    
    - name: Cr√©er une invalidation CloudFront
      shell: |
        aws cloudfront create-invalidation \
          --distribution-id {{ s3_config.cloudfront_id }} \
          --paths "/*"
      register: cloudfront_invalidation

    - name: R√©cup√©rer l'ID d'invalidation
      set_fact:
        invalidation_id: "{{ (cloudfront_invalidation.stdout | from_json).Invalidation.Id }}"

    - name: Attendre la completion de l'invalidation (optionnel)
      shell: |
        aws cloudfront wait invalidation-completed \
          --distribution-id {{ s3_config.cloudfront_id }} \
          --id {{ invalidation_id }}
      when: wait_for_invalidation | default(false) | bool
      async: 1800  # 30 minutes max
      poll: 30

    # =================================
    # V√âRIFICATIONS POST-D√âPLOIEMENT
    # =================================
    
    - name: Tester l'accessibilit√© du site
      uri:
        url: "https://{{ s3_config.cloudfront_domain }}"
        method: GET
        status_code: 200
        timeout: 30
      register: site_check
      retries: 3
      delay: 10

    - name: Tester l'API via CloudFront
      uri:
        url: "https://{{ s3_config.cloudfront_domain }}/api/health"
        method: GET
        status_code: 200
        timeout: 30
      register: api_check
      retries: 3
      delay: 10
      ignore_errors: yes

    # =================================
    # RAPPORT DE D√âPLOIEMENT
    # =================================
    
    - name: G√©n√©rer le rapport de d√©ploiement
      template:
        src: deployment-report.j2
        dest: "{{ playbook_dir }}/deployment-report-{{ ansible_date_time.epoch }}.html"
      vars:
        deployment_time: "{{ ansible_date_time.iso8601 }}"
        s3_bucket_name: "{{ s3_config.s3_static_bucket }}"
        cloudfront_domain: "{{ s3_config.cloudfront_domain }}"
        invalidation_id: "{{ invalidation_id }}"
        site_accessible: "{{ site_check.status == 200 }}"
        api_accessible: "{{ api_check.status == 200 if api_check.status is defined else false }}"

    # =================================
    # NOTIFICATIONS
    # =================================
    
    - name: Notifier le succ√®s du d√©ploiement
      debug:
        msg: |
          ‚úÖ D√©ploiement r√©ussi !
          
          üåê Site web: https://{{ s3_config.cloudfront_domain }}
          üì¶ Bucket S3: {{ s3_config.s3_static_bucket }}
          üöÄ CloudFront: {{ s3_config.cloudfront_id }}
          üîÑ Invalidation: {{ invalidation_id }}
          
          ‚è±Ô∏è  L'invalidation CloudFront peut prendre jusqu'√† 15 minutes.

    - name: Envoyer notification Slack (optionnel)
      uri:
        url: "{{ slack_webhook_url }}"
        method: POST
        body_format: json
        body:
          text: |
            üöÄ D√©ploiement frontend r√©ussi !
            
            Environment: {{ environment }}
            Site: https://{{ s3_config.cloudfront_domain }}
            D√©ploy√© par: {{ ansible_user_id }}
      when: slack_webhook_url is defined
      ignore_errors: yes

# =================================
# PLAYBOOK DE ROLLBACK
# =================================

- name: Rollback Frontend Deployment
  hosts: localhost
  gather_facts: no
  vars:
    backup_timestamp: "{{ backup_timestamp }}"  # √Ä fournir
    
  tasks:
    - name: V√©rifier que le timestamp de backup est fourni
      fail:
        msg: "Veuillez fournir backup_timestamp"
      when: backup_timestamp is not defined

    - name: Restaurer depuis le backup
      shell: |
        aws s3 sync s3://{{ s3_config.s3_static_bucket }}-backup-{{ backup_timestamp }} s3://{{ s3_config.s3_static_bucket }} \
          --region {{ aws_region }} \
          --delete

    - name: Invalider CloudFront apr√®s rollback
      shell: |
        aws cloudfront create-invalidation \
          --distribution-id {{ s3_config.cloudfront_id }} \
          --paths "/*"
